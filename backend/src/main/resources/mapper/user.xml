<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.back.user.model.mapper.UserMapper">

	<resultMap type="userDto" id="User">
		<result column="user_name" property="userName"/>
		<result column="user_id" property="userId"/>
		<result column="user_pwd" property="userPwd"/>
		<result column="email_id" property="emailId"/>
		<result column="email_domain" property="emailDomain"/>
		<result column="phonenumber" property="phoneNumber"/>
		<result column="permission" property="permission"/>
	</resultMap>
	
	<resultMap type="userDto" id="UserMore" extends="User">
		<result column="join_date" property="joinDate"/>
		<result column="img" property="img"/>
	</resultMap>

	<select id="selectCntById" parameterType="String" resultType="int">
		select count(user_id) from userinfo
		where user_id = #{userId}
	</select>

	<insert id="insertUser" parameterType="userDto">
		insert into userinfo (user_id, user_pwd, user_name, email_id, email_domain, phonenumber)
		values (#{userId}, #{userPwd}, #{userName}, #{emailId}, #{emailDomain}, #{phoneNumber})
	</insert>
	
	<select id="selectLoginUser" parameterType="userDto" resultMap="UserMore">
		select user_id, user_pwd, user_name, email_id, email_domain, phonenumber, join_date, permission, img
		from userinfo 
		where user_id=#{userId} and user_pwd=#{userPwd}
	</select>
	
	<select id="selectUserById" parameterType="String" resultMap="UserMore">
		select user_id, user_pwd, user_name, email_id, email_domain, phonenumber, join_date, permission, img
		from userinfo
		where user_id=#{userId}
	</select>

	<select id="selectUserCnt" resultType="int">
		select count(user_id) from userinfo where user_id != 'admin'
	</select>
	
	<select id="selectAllUser" resultMap="UserMore">
		select * from userinfo
		where permission = 0
	</select>
	
	<select id="selectId" parameterType="map" resultType="String">
	    select user_id from userinfo
	    <where>
	        <if test="findSource.equals('emailFind')">
	            and user_name = #{firstInput} and email_id = SUBSTRING_INDEX(#{secondInput}, '@', 1) and email_domain = SUBSTRING_INDEX(#{secondInput}, '@', -1)
	        </if>
	        <if test="findSource.equals('phoneFind')">
	            and user_name = #{firstInput} and phonenumber = #{secondInput}
	        </if>
	    </where>
	</select>
	
	<select id="selectPwd" parameterType="map" resultType="String">
	    select user_pwd from userinfo
	    <where>
	        <if test="findSource.equals('emailFind')">
	            and user_id = #{firstInput} and email_id = SUBSTRING_INDEX(#{secondInput}, '@', 1) and email_domain = SUBSTRING_INDEX(#{secondInput}, '@', -1)
	        </if>
	        <if test="findSource.equals('phoneFind')">
	            and user_id = #{firstInput} and phonenumber = #{secondInput}
	        </if>
	    </where>
	</select>
	
	<delete id="deleteBookMark" parameterType="String">
		delete from bookmark where user_id = #{userId};
	</delete>
	
	<delete id="deleteRefreshToken" parameterType="String">
		delete from refreshtoken where user_id = #{userId};
	</delete>
		
	<delete id="deleteUserInfo" parameterType="String">
		delete from userinfo where user_id = #{userId};
	</delete>
	
	<update id="updateUser" parameterType="map">
		update userinfo 
		set user_name = #{userName}, email_id = #{emailId}, email_domain = #{emailDomain}, phonenumber = #{phoneNumber}
		where user_id = #{userId}
	</update>
	
	<update id="updatePwd" parameterType="map">
		update userinfo 
		set user_pwd = #{newPwd}
		where user_id = #{userId} and user_pwd = #{currentPwd}
	</update>
</mapper>

